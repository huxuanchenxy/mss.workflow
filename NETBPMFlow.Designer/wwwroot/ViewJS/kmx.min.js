var mxfile = function () { function e() { } return e.getActivityObject = function (e, t) { var r = {}; return r.id = e.getAttribute("id"), "name" === t ? r.name = e.getAttribute("name") : "label" === t && (r.name = e.getAttribute("label")), r.code = e.getAttribute("code"), r }, e.setActivityTypeElement = function (e, t) { return t.type === kmodel.Config.NODE_TYPE_START || t.type === kmodel.Config.NODE_TYPE_INTERMEDIATE || t.type === kmodel.Config.NODE_TYPE_END ? (e.setAttribute("trigger", t.trigger), "Timer" === t.trigger && e.setAttribute("expression", t.expression)) : t.type === kmodel.Config.NODE_TYPE_MULTIPLEINSTANCE ? (e.setAttribute("complexType", t.complexType), e.setAttribute("mergeType", t.mergeType), e.setAttribute("compareType", t.compareType), e.setAttribute("completeOrder", t.completeOrder)) : t.type === kmodel.Config.NODE_TYPE_GATEWAY ? (e.setAttribute("gatewaySplitJoinType", t.gatewaySplitJoinType), e.setAttribute("gatewayDirection", t.gatewayDirection)) : t.type === kmodel.Config.NODE_TYPE_SUBPROCESS && e.setAttribute("subId", t.subId), e }, e.getActivityTypeObject = function (e, t) { return e.type = t.getAttribute("type"), e.type === kmodel.Config.NODE_TYPE_START || e.type === kmodel.Config.NODE_TYPE_END || e.type === kmodel.Config.NODE_TYPE_INTERMEDIATE ? (e.trigger = t.getAttribute("trigger"), "Timer" === e.trigger && (e.expression = t.getAttribute("expression"))) : e.type === kmodel.Config.NODE_TYPE_MULTIPLEINSTANCE ? (e.complexType = t.getAttribute("complexType"), e.mergeType = t.getAttribute("mergeType"), e.compareType = t.getAttribute("compareType"), e.completeOrder = t.getAttribute("completeOrder")) : e.type === kmodel.Config.NODE_TYPE_GATEWAY ? (e.gatewaySplitJoinType = t.getAttribute("gatewaySplitJoinType"), e.gatewayDirection = t.getAttribute("gatewayDirection")) : e.type === kmodel.Config.NODE_TYPE_SUBPROCESS && (e.subId = t.getAttribute("subId")), e }, e.setPerformersElement = function (t, r) { for (var i = t.createElement("Performers"), n = null, a = 0; a < r.length; a++)n = e.setPerformerElement(t, r[a]), i.appendChild(n); return i }, e.setPerformerElement = function (e, t) { var r = e.createElement("Performer"); return r.setAttribute("id", t.id), r }, e.getPerformerObject = function (e) { var t = {}; return t.id = e.getAttribute("id"), t }, e.setActionsElement = function (t, r) { for (var i = t.createElement("Actions"), n = 0; n < r.length; n++) { var a = t.createElement("Action"); a = e.setActionElement(a, r[n]), i.appendChild(a) } return i }, e.setActionElement = function (e, t) { return e.setAttribute("type", t.type), e.setAttribute("name", t.name), e.setAttribute("assembly", t.assembly), e.setAttribute("interface", t.interface), e.setAttribute("method", t.method), e }, e.getActionObject = function (e) { var t = {}; return t.type = e.getAttribute("type"), t.name = e.getAttribute("name"), t.assembly = e.getAttribute("assembly"), t.interface = e.getAttribute("interface"), t.method = e.getAttribute("method"), t }, e.setTransitionElement = function (e, t) { var r = e.createElement("Transition"); r.setAttribute("from", t.from), r.setAttribute("to", t.to); var i = e.createElement("Description"); r.appendChild(i); var n = e.createTextNode(t.description); return i.appendChild(n), r.setAttribute("label", t.description), r }, e.getTransitionObject = function (e) { var t = {}; return t.id = e.getAttribute("id"), t.from = e.getAttribute("from"), t.to = e.getAttribute("to"), t }, e.setConditionElement = function (e, t) { var r = e.createElement("Condition"); r.setAttribute("type", t.type); var i = e.createElement("ConditionText"); r.appendChild(i); var n = e.createTextNode($.trim(t.text)); return i.appendChild(n), r }, e.getConditionObject = function (e) { var t = {}; return e && (t.type = e.getAttribute("type"), e.getElementsByTagName("ConditionText")[0] && (t.text = jshelper.replaceHTMLTags(e.textContent))), t }, e.setReceiverElement = function (e, t) { var r = e.createElement("Receiver"); return r.setAttribute("type", t.type), r }, e.getReceiverObject = function (e) { var t = {}; if (e) { var r = e.getAttribute("type"); void 0 !== r && (t.type = r) } return t }, e.getGeographyEdgeObject = function (e) { var t = {}; return t.parent = e.getAttribute("parent"), t.style = e.getAttribute("style"), t }, e.getGeographyVertexObject = function (t) { var r = {}; r.parent = t.getAttribute("parent"), r.style = t.getAttribute("style"); var i = t.getElementsByTagName("Widget")[0]; return i && (r.widget = e.getWidgetVertexObject(i)), r }, e.getWidgetVertexObject = function (e) { var t = {}; return t.left = parseInt(e.getAttribute("left")), t.top = parseInt(e.getAttribute("top")), t.width = parseInt(e.getAttribute("width")), t.height = parseInt(e.getAttribute("height")), t }, e.getParticipantObject = function (e) { var t = {}; return t.type = e.getAttribute("type"), t.id = e.getAttribute("id"), t.name = e.getAttribute("name"), t.code = e.getAttribute("code"), t.outerId = e.getAttribute("outerId"), t }, e.setParticipantElement = function (e, t) { var r = e.createElement("Participant"); return r.setAttribute("type", t.type), r.setAttribute("id", t.id), r.setAttribute("name", t.name), r.setAttribute("code", t.code), r.setAttribute("outerId", t.outerId), r }, e.getSwimlaneObject = function (e) { var t = {}; return t.id = e.getAttribute("id"), t.name = e.getAttribute("name"), t }, e.getGeographySwimlaneObject = function (e) { var t = {}; t.parent = e.getAttribute("parent"), t.style = e.getAttribute("style"); var r = e.getElementsByTagName("Widget")[0]; if (r) { var i = {}; i.left = parseInt(r.getAttribute("left")), i.top = parseInt(r.getAttribute("top")), i.width = parseInt(r.getAttribute("width")), i.height = parseInt(r.getAttribute("height")), t.widget = i } return t }, e.getGroupObject = function (e) { var t = {}; return t.id = e.getAttribute("id"), t.name = e.getAttribute("name"), t }, e.getGeographyGroupObject = function (e) { var t = {}; t.parent = e.getAttribute("parent"), t.style = e.getAttribute("style"); var r = e.getElementsByTagName("Widget")[0]; if (r) { var i = {}; i.left = parseInt(r.getAttribute("left")), i.top = parseInt(r.getAttribute("top")), i.width = parseInt(r.getAttribute("width")), i.height = parseInt(r.getAttribute("height")), t.widget = i } return t }, e }(), kloader = function () { function e() { } function t(e, t, r) { var i = e.createElement("Participants"); if (t.appendChild(i), r) for (var n = 0; n < r.length; n++) { var a = r[n], o = mxfile.setParticipantElement(e, a); i.appendChild(o) } } function r(e, t, r) { var a = e.createElement("Layout"); t.appendChild(a), i(e, a, r), n(e, a, r) } function i(e, t, r) { var i = e.createElement("Swimlanes"); t.appendChild(i); for (var n = r.getChildVertices(kmain.mxGraphEditor.graph.getDefaultParent()), a = 0; a < n.length; a++) { var o = n[a], s = r.getValue(o); if ("Swimlane" === s.nodeName) { var l = e.createElement("Swimlane"); i.appendChild(l), l.setAttribute("id", o.id), l.setAttribute("name", s.getAttribute("label")); var c = e.createElement("Geography"); l.appendChild(c), c.setAttribute("parent", o.parent.id), c.setAttribute("style", o.style); var d = e.createElement("Widget"); c.appendChild(d), d.setAttribute("left", o.geometry.x), d.setAttribute("top", o.geometry.y), d.setAttribute("width", o.geometry.width), d.setAttribute("height", o.geometry.height) } } } function n(e, t, r) { var i = e.createElement("Groups"); t.appendChild(i); for (var n = r.getChildVertices(kmain.mxGraphEditor.graph.getDefaultParent()), a = 0; a < n.length; a++) { var o = n[a], s = r.getValue(o); if ("Group" === s.nodeName) { var l = e.createElement("Group"); i.appendChild(l), l.setAttribute("id", o.id), l.setAttribute("name", s.getAttribute("label")); var c = e.createElement("Geography"); l.appendChild(c), c.setAttribute("parent", o.parent.id), o.style ? c.setAttribute("style", o.style) : c.setAttribute("style", "verticalAlign=top;"); var d = e.createElement("Widget"); c.appendChild(d), d.setAttribute("left", o.geometry.x), d.setAttribute("top", o.geometry.y), d.setAttribute("width", o.geometry.width), d.setAttribute("height", o.geometry.height) } } } function a(e, t, r) { var i = e.createElement("WorkflowProcesses"); t.appendChild(i); var n = e.createElement("Process"); i.appendChild(n), n.setAttribute("name", r.ProcessName), n.setAttribute("id", r.ProcessGUID); var a = e.createElement("Description"); n.appendChild(a); var o = e.createTextNode(jshelper.escapeHtml(r.Description)); return a.appendChild(o), n } function o(e, t, r) { var i = r.getChildVertices(kmain.mxGraphEditor.graph.getDefaultParent()), n = null, a = null, o = null, l = null; if (i.length > 0) { var c = e.createElement("Activities"); t.appendChild(c); for (var d = 0; d < i.length; d++) { if (n = i[d], "Activity" === (a = r.getValue(n)).nodeName && s(e, c, n, a), "Swimlane" === a.nodeName) for (var m = r.getChildVertices(r.getCell(n.id)), p = 0; p < m.length; p++)o = m[p], "Activity" === (l = r.getValue(o)).nodeName ? s(e, c, o, l) : window.console.log("invalid node type:" + l.nodeName); if (a.nodeName = "Group") for (var m = r.getChildVertices(r.getCell(n.id)), p = 0; p < m.length; p++)o = m[p], "Activity" === (l = r.getValue(o)).nodeName ? s(e, c, o, l) : window.console.log("invalid node type:" + l.nodeName) } } } function s(e, t, r, i) { var n = null, a = "", o = null, s = null, l = null, c = e.createElement("Activity"); if (t.appendChild(c), c.setAttribute("id", r.id), c.setAttribute("name", i.getAttribute("label")), c.setAttribute("code", i.getAttribute("code")), o = i.getElementsByTagName("Description")[0]) { var d = e.createElement("Description"); if (c.appendChild(d), "undefined" !== o.textContent) { var m = e.createTextNode(jshelper.escapeHtml(o.textContent)); d.appendChild(m) } } a = (n = i.getElementsByTagName("ActivityType")[0]).getAttribute("type"); var p = e.createElement("ActivityType"); if (c.appendChild(p), p.setAttribute("type", a), a === kmodel.Config.NODE_TYPE_START || a === kmodel.Config.NODE_TYPE_END || a === kmodel.Config.NODE_TYPE_INTERMEDIATE) { var g = n.getAttribute("trigger"); if (p.setAttribute("trigger", g), "Timer" === g) { var u = n.getAttribute("expression"); p.setAttribute("expression", u), a === kmodel.Config.NODE_TYPE_START ? (kmain.mxSelectedProcessStartType = 1, kmain.mxSelectedProcessStartExpression = u) : a === kmodel.Config.NODE_TYPE_END && (kmain.mxSelectedProcessEndType = 1, kmain.mxSelectedProcessEndExpression = u) } else kmain.mxSelectedProcessStartType = 0, kmain.mxSelectedProcessStartExpression = "" } else "GatewayNode" == a ? (p.setAttribute("gatewaySplitJoinType", n.getAttribute("gatewaySplitJoinType")), p.setAttribute("gatewayDirection", n.getAttribute("gatewayDirection"))) : "SubProcessNode" == a ? p.setAttribute("subId", n.getAttribute("subId")) : "MultipleInstanceNode" == a && (p.setAttribute("complexType", n.getAttribute("complexType")), p.setAttribute("mergeType", n.getAttribute("mergeType")), p.setAttribute("compareType", n.getAttribute("compareType")), p.setAttribute("completeOrder", n.getAttribute("completeOrder"))); if (s = i.getElementsByTagName("Performers")[0]) { var f = s.getElementsByTagName("Performer"); if (f.length > 0) { var y = e.createElement("Performers"); c.appendChild(y); for (var v = 0; v < f.length; v++) { var E = f[v], h = e.createElement("Performer"); y.appendChild(h), h.setAttribute("id", E.getAttribute("id")) } } } if (l = i.getElementsByTagName("Actions")[0]) { var x = l.getElementsByTagName("Action"); if (x.length > 0) { var b = e.createElement("Actions"); c.appendChild(b); for (var A = 0; A < x.length; A++) { var T = x[A], P = e.createElement("Action"); b.appendChild(P), P.setAttribute("type", T.getAttribute("type")), P.setAttribute("name", T.getAttribute("name")), P.setAttribute("assembly", T.getAttribute("assembly")), P.setAttribute("interface", T.getAttribute("interface")), P.setAttribute("method", T.getAttribute("method")) } } } var D = e.createElement("Geography"); c.appendChild(D), D.setAttribute("parent", r.parent.id), D.setAttribute("style", r.style); var C = e.createElement("Widget"); D.appendChild(C), C.setAttribute("left", r.geometry.x), C.setAttribute("top", r.geometry.y), C.setAttribute("width", r.geometry.width), C.setAttribute("height", r.geometry.height) } function l(e, t, r) { var i = e.createElement("Transitions"); t.appendChild(i), c(e, i, r, r.getChildEdges(kmain.mxGraphEditor.graph.getDefaultParent())); for (var n = d(r), a = 0; a < n.length; a++)c(e, i, r, r.getChildEdges(r.getCell(n[a]))); for (var o = m(r), a = 0; a < o.length; a++)c(e, i, r, r.getChildEdges(r.getCell(o[a]))) } function c(e, t, r, i) { var n = null, a = null; if (i.length > 0) for (var o = 0; o < i.length; o++)n = i[o], "Transition" === (a = r.getValue(n)).nodeName && p(e, t, n, a) } function d(e) { for (var t = [], r = e.getChildVertices(kmain.mxGraphEditor.graph.getDefaultParent()), i = null, n = 0; n < r.length; n++)i = r[n], "Swimlane" === e.getValue(i).nodeName && t.push(i.id); return t } function m(e) { for (var t = [], r = e.getChildVertices(kmain.mxGraphEditor.graph.getDefaultParent()), i = null, n = 0; n < r.length; n++)i = r[n], "Group" === e.getValue(i).nodeName && t.push(i.id); return t } function p(e, t, r, i) { var n = null, a = "", o = null, s = "", l = null, c = e.createElement("Transition"); if (t.appendChild(c), c.setAttribute("id", r.id), c.setAttribute("from", r.source.id), c.setAttribute("to", r.target.id), descriptionNode = i.getElementsByTagName("Description")[0], descriptionNode) { var d = e.createElement("Description"); if (c.appendChild(d), "undefined" !== descriptionNode.textContent) { var m = e.createTextNode(jshelper.escapeHtml(descriptionNode.textContent)); d.appendChild(m) } } if (n = i.getElementsByTagName("Receiver")[0]) { var p = e.createElement("Receiver"); c.appendChild(p), a = n.getAttribute("type"), !1 === $.isEmptyObject(a) && "undefined" !== a && "null" !== a && p.setAttribute("type", a) } if (o = i.getElementsByTagName("Condition")[0]) { var g = e.createElement("Condition"); if (c.appendChild(g), s = o.getAttribute("type"), !1 === $.isEmptyObject(s) && "undefined" !== s && (g.setAttribute("type", s), l = o.getElementsByTagName("ConditionText")[0], !1 === $.isEmptyObject(l))) { var u = e.createElement("ConditionText"); g.appendChild(u); var f = $.trim(l.textContent); if ("" !== f) { var y = e.createCDATASection(f); u.appendChild(y) } } } var v = e.createElement("Geography"); c.appendChild(v), v.setAttribute("parent", r.parent.id), v.setAttribute("style", r.style) } return e.load = function (e) { var t = {}, r = {}, i = []; t.participants = i, t.process = r; var n = e.XmlContent, a = mxUtils.parseXml(n); Array.prototype.forEach.call(a.getElementsByTagName("Participant"), function (e) { var t = mxfile.getParticipantObject(e); i.push(t) }); var o = a.getElementsByTagName("Process")[0]; if (o) { var s = [], l = [], c = [], d = []; r.name = o.getAttribute("name"), r.id = o.getAttribute("id"); var m = o.getElementsByTagName("Description")[0]; m && (r.description = jshelper.replaceHTMLTags(m.textContent)); var p = a.documentElement.getElementsByTagName("Layout")[0]; if (p) { var g = p.getElementsByTagName("Swimlanes")[0]; g && Array.prototype.forEach.call(g.getElementsByTagName("Swimlane"), function (e) { var t = mxfile.getSwimlaneObject(e), r = e.getElementsByTagName("Geography")[0]; r && (t.geography = mxfile.getGeographySwimlaneObject(r)), c.push(t) }); var u = p.getElementsByTagName("Groups")[0]; u && Array.prototype.forEach.call(u.getElementsByTagName("Group"), function (e) { var t = mxfile.getGroupObject(e), r = e.getElementsByTagName("Geography")[0]; r && (t.geography = mxfile.getGeographyGroupObject(r)), d.push(t) }) } r.swimlanes = c, r.groups = d, r.activities = s, r.transitions = l, Array.prototype.forEach.call(o.getElementsByTagName("Activity"), function (e) { var t = {}, r = [], i = [], n = {}; t = mxfile.getActivityObject(e, "name"); var a = e.getElementsByTagName("Description")[0]; a && (t.description = jshelper.replaceHTMLTags(a.textContent)); var o = e.getElementsByTagName("ActivityType")[0]; t = mxfile.getActivityTypeObject(t, o), Array.prototype.forEach.call(e.getElementsByTagName("Performer"), function (e) { var t = mxfile.getPerformerObject(e); r.push(t) }), t.performers = r, Array.prototype.forEach.call(e.getElementsByTagName("Action"), function (e) { var t = mxfile.getActionObject(e); i.push(t) }), t.actions = i, (n = e.getElementsByTagName("Geography")[0]) && (t.geography = mxfile.getGeographyVertexObject(n)), s.push(t) }), Array.prototype.forEach.call(a.getElementsByTagName("Transition"), function (e) { var t = mxfile.getTransitionObject(e), r = e.getElementsByTagName("Description")[0]; r && (t.description = jshelper.replaceHTMLTags(r.textContent)); var i = e.getElementsByTagName("Receiver")[0]; i && (t.receiver = mxfile.getReceiverObject(i)); var n = e.getElementsByTagName("Condition")[0]; n && (t.condition = mxfile.getConditionObject(n)); var a = e.getElementsByTagName("Geography")[0]; a && (t.geography = mxfile.getGeographyEdgeObject(a)), l.push(t) }) } var f = { processGUID: e.ProcessGUID, version: e.Version, package: t }; return new kmodel.GraphData(f) }, e.serialize2Xml = function (e, i) { if (!e) return null; var n = mxUtils.parseXml('<?xml version="1.0" encoding="utf-8"?><Package></Package>'), s = n.documentElement; t(n, s, i); var c = a(n, s, e), d = kmain.mxGraphEditor.graph.getModel(); return r(n, s, d), o(n, c, d), l(n, c, d), vkbeautify.xml(mxUtils.getXml(n, " ")) }, e }(), kmain = function () { function e() { } function t() { e.mxSelectedProcessEntity = null, e.mxSelectedDomElement = {}, e.mxSelectedPackageData = null, e.mxSelectedParticipants = [], e.mxSelectedProcessStartType = 0, e.mxSelectedProcessStartExpression = "", e.mxSelectedProcessEndType = 0, e.mxSelectedProcessEndExpression = "" } function r(e) { if (e.type === kmodel.Config.NODE_TYPE_TASK || e.type === kmodel.Config.NODE_TYPE_MULTIPLEINSTANCE) BootstrapDialog.show({ title: "活动属性", message: $("<div></div>").load("activity/edit"), data: { node: e }, draggable: !0 }); else if (e.type === kmodel.Config.NODE_TYPE_GATEWAY) BootstrapDialog.show({ title: "网关决策属性", message: $("<div></div>").load("activity/gateway"), data: { node: e }, draggable: !0 }); else if (e.type === kmodel.Config.NODE_TYPE_SUBPROCESS) BootstrapDialog.show({ title: "子流程属性", message: $("<div></div>").load("activity/subprocess"), data: { node: e }, draggable: !0 }); else if (e.type === kmodel.Config.NODE_TYPE_START || e.type === kmodel.Config.NODE_TYPE_INTERMEDIATE) BootstrapDialog.show({ title: "事件属性", message: $("<div></div>").load("activity/event"), data: { node: e }, draggable: !0 }); else { if (e.type !== kmodel.Config.NODE_TYPE_END) return $.msgBox({ title: "Designer / Property", content: "未知节点类型！" + e.type, type: "alert" }), !1; BootstrapDialog.show({ title: "事件属性", message: $("<div></div>").load("activity/endevent"), data: { node: e }, draggable: !0 }) } } function i(t) { var r = e.mxGraphEditor.graph.getModel().getValue(t), i = mxfile.getActivityObject(r, "label"), n = r.getElementsByTagName("Description")[0]; n && (i.description = n.textContent); var a = r.getElementsByTagName("ActivityType")[0]; i = mxfile.getActivityTypeObject(i, a); var o = r.getElementsByTagName("Performers")[0]; if (o) { var s = []; Array.prototype.forEach.call(o.getElementsByTagName("Performer"), function (e) { var t = mxfile.getPerformerObject(e); s.push(t) }), i.performers = s } var l = r.getElementsByTagName("Actions")[0]; if (l) { var c = []; Array.prototype.forEach.call(l.getElementsByTagName("Action"), function (e) { var t = mxfile.getActionObject(e); c.push(t) }), i.actions = c } return i } function n(t) { var r = e.mxGraphEditor.graph.getModel().getValue(t), i = mxfile.getTransitionObject(r), n = r.getElementsByTagName("Description")[0]; n && (i.description = n.textContent); var a = r.getElementsByTagName("Condition")[0]; a && (i.condition = mxfile.getConditionObject(a)); var o = r.getElementsByTagName("Receiver")[0]; return i.receiver = mxfile.getReceiverObject(o), i } function a(e) { var t = null; try { if (mxClient.isBrowserSupported()) { mxObjectCodec.allowEval = !0; var r = mxUtils.load(e).getDocumentElement(); t = new mxEditor(r), mxObjectCodec.allowEval = !1, t.graph.createPanningManager = function () { var e = new mxPanningManager(this); return e.border = 30, e }, t.graph.allowAutoPanning = !0, t.graph.timerAutoScroll = !0; var i = document.title, n = function (e) { document.title = i }; t.addListener(mxEvent.OPEN, n), t.addListener(mxEvent.ROOT, n), n(), t.setStatus("mxGraph " + mxClient.VERSION) } else $.msgBox({ title: "Designer / Index", content: "不支持当前版本的浏览器，请使用更新版本的浏览器！", type: "info" }) } catch (e) { throw $.msgBox({ title: "Designer / Index", content: "图形设计器启动异常：" + e.message, type: "info" }), e } return t } function o(r, i) { t(), e.mxSelectedProcessEntity = i.ProcessEntity, e.saveProcessFile() } function s(r, i) { t(); var n = { ProcessGUID: i.ProcessEntity.ProcessGUID, Version: i.ProcessEntity.Version }; processapi.queryProcessFile(n, function (t) { if (1 === t.Status) { e.mxGraphEditor.graph.getModel().clear(); var r = kloader.load(t.Entity); e.mxSelectedPackageData = r.package, e.mxSelectedParticipants = r.package.participants, e.mxSelectedProcessEntity = i.ProcessEntity } else $.msgBox({ title: "Designer / Process", content: "流程定义记录读取失败！错误：" + t.Message, type: "error" }) }) } function l() { $(".progress .progress-bar").progressbar({ transition_delay: 200 }); var e = $(".js-loading-bar"); e.find(".bar"); e.modal("show"), setTimeout(function () { e.modal("hide") }, 500) } e.init = function (e) { l(), $("#kgraphCanvas").on("click", function (e) { $(this).focus() }), $.fn.modal.Constructor.prototype.enforceFocus = function () { }, void 0 !== processlist && (processlist.afterCreated.subscribe(o), processlist.afterOpened.subscribe(s)) }, e.showDiagramReadOnly = function () { e.mxGraphEditor = a("scripts/mxGraph/src/editor/config/workfloweditor-readonly.xml") }, e.initializeMxGraphEditor = function () { var t = e.mxGraphEditor = a("scripts/mxGraph/src/editor/config/workfloweditor.xml"), o = e.mxGraphEditor.graph; t.addListener(mxEvent.SAVE, function () { e.saveProcessFile() }), o.addListener(mxEvent.CELLS_ADDED, function (e) { }), o.addMouseListener({ mouseDown: function (e, t) { }, mouseMove: function (e, t) { }, mouseUp: function (e, t) { } }), o.connectionHandler.addListener(mxEvent.CONNECT, function (e, t) { }), t.createProperties = function (t) { var a = this.graph.getModel(), o = a.getValue(t); if (mxUtils.isNode(o)) if (e.mxSelectedDomElement.Cell = t, a.isVertex(t)) "Activity" === o.nodeName ? (e.mxSelectedDomElement.ElementType = "Activity", r(e.mxSelectedDomElement.Element = i(t))) : o.nodeName; else if (a.isEdge(t) && "Transition" === o.nodeName) { e.mxSelectedDomElement.ElementType = "Transition"; var s = e.mxSelectedDomElement.Element = n(t); BootstrapDialog.show({ title: "转移属性", message: $("<div></div>").load("transition/edit"), data: { node: s }, draggable: !0 }) } }, t.showAdvanced = function (e) { window.console.log("show advanced...in kmain") } }, e.createProcess = function () { e.mxGraphEditor.graph.getModel().clear(), processlist.createProcess() }, e.openProcess = function () { BootstrapDialog.show({ title: "流程列表", message: $("<div></div>").load("process/list"), draggable: !0 }) }, e.setting = function () { BootstrapDialog.show({ title: "系统参数设置", message: $("<div>你可以在这个页面设置一些参数。。。</div>"), buttons: [{ label: "确定", cssClass: "btn-primary", action: function (e) { e.close() } }] }) }, e.previewXml = function () { var t = kloader.serialize2Xml(e.mxSelectedProcessEntity, e.mxSelectedParticipants); if (!1 === $.isEmptyObject(t)) { var r = $("<div></div>"); $('<textarea style="width:540px;min-height:280px;"/>').val(t).appendTo(r); BootstrapDialog.show({ title: "XML文件内容", message: r, buttons: [{ label: "关闭", cssClass: "btn-primary", action: function (e) { e.close() } }], draggable: !0 }) } else $.msgBox({ title: "Designer / Index", content: "图形内容为空，请确认是否打开流程记录！", type: "error" }) }, e.importDiagram = function () { BootstrapDialog.show({ title: "导入XML", message: $("<div></div>").load("process/import"), draggable: !0 }) }, e.saveProcessFile = function () { if (e.mxSelectedProcessEntity) { var t = kloader.serialize2Xml(e.mxSelectedProcessEntity, e.mxSelectedParticipants), r = { ProcessGUID: e.mxSelectedProcessEntity.ProcessGUID, Version: e.mxSelectedProcessEntity.Version, StartType: e.mxSelectedProcessStartType, StartExpression: e.mxSelectedProcessStartExpression, EndType: e.mxSelectedProcessEndType, EndExpression: e.mxSelectedProcessEndExpression, XmlContent: t }; processapi.saveProcessFile(r) } else processlist.createProcess() }, e.setVertexValue = function (t) { var r = e.mxGraphEditor.graph.getModel(), i = r.getValue(e.mxSelectedDomElement.Cell); i.setAttribute("label", t.name), i.setAttribute("code", t.code); var n = i.getElementsByTagName("Description")[0]; n || (n = i.appendChild(i.ownerDocument.createElement("Description"))), n.textContent = t.description; var a = i.getElementsByTagName("ActivityType")[0]; a = mxfile.setActivityTypeElement(a, t); var o = i.getElementsByTagName("Actions")[0]; o || (o = i.appendChild(i.ownerDocument.createElement("Actions"))); var s = o.getElementsByTagName("Action")[0]; if (s || (s = o.appendChild(o.ownerDocument.createElement("Action"))), t.actions) { var l = t.actions[0]; s = mxfile.setActionElement(s, l) } r.beginUpdate(); try { r.setValue(e.mxSelectedDomElement.Cell, i) } finally { r.endUpdate() } }, e.setVertexPerformers = function (t) { var r = e.mxGraphEditor.graph.getModel(), i = r.getValue(e.mxSelectedDomElement.Cell); if (t) { var n = i.getElementsByTagName("Performers")[0]; n ? c(n) : n = i.appendChild(i.ownerDocument.createElement("Performers")); for (var a = null, o = null, s = 0; s < t.length; s++)a = t[s], o = mxfile.setPerformerElement(n.ownerDocument, a), n.appendChild(o) } r.beginUpdate(); try { r.setValue(e.mxSelectedDomElement.Cell, i) } finally { r.endUpdate() } }; var c = function (e) { for (var t; t = e.lastChild;)e.removeChild(t) }; return e.setEdgeValue = function (t) { var r = e.mxGraphEditor.graph.getModel(), i = r.getValue(e.mxSelectedDomElement.Cell), n = i.getElementsByTagName("Description")[0]; if (n || (n = i.appendChild(i.ownerDocument.createElement("Description"))), n.textContent = t.description, i.setAttribute("label", t.description), i.setAttribute("from", t.from), i.setAttribute("to", t.to), t.condition) { var a = i.getElementsByTagName("Condition")[0]; a || (a = i.appendChild(i.ownerDocument.createElement("Condition"))), a.setAttribute("type", t.condition.type); var o = a.getElementsByTagName("ConditionText")[0]; o || (o = a.appendChild(i.ownerDocument.createElement("ConditionText"))), o.textContent = t.condition.text } var s = i.getElementsByTagName("Receiver")[0]; s || (s = i.appendChild(i.ownerDocument.createElement("Receiver"))), s.setAttribute("type", t.receiver.type), r.beginUpdate(); try { r.setValue(e.mxSelectedDomElement.Cell, i) } finally { r.endUpdate() } }, e.renderReadyTasks = function (t) { var r = e.mxGraphEditor.graph, i = e.mxGraphEditor.graph.getModel(); i.beginUpdate(); try { $.each(t, function (e, t) { i.getCell(t.ActivityGUID).setStyle("strokeColor=green;fillColor=green;"), r.refresh() }) } finally { i.endUpdate() } }, e.renderCompletedTransitions = function (t) { var r = e.mxGraphEditor.graph, i = e.mxGraphEditor.graph.getModel(); i.beginUpdate(); try { $.each(t, function (e, t) { var n = i.getCell(t.TransitionGUID); if (void 0 !== n) { var a = r.getCellStyle(n), o = r.stylesheet.getCellStyle("edgeStyle=orthogonalEdgeStyle;html=1;rounded=1;jettySize=auto;orthogonalLoop=1;strokeColor=red;strokeWidth=2;", a), s = []; for (var l in o) s.push(l + "=" + o[l]); n.style = s.join(";"), r.refresh() } }) } finally { i.endUpdate() } }, e }(), kmodel = function () { function e() { } return e.Config = { NODE_PREFIX: "ACT", NODE_TYPE_START: "StartNode", NODE_TYPE_INTERMEDIATE: "IntermediateNode", NODE_TYPE_END: "EndNode", NODE_TYPE_TASK: "TaskNode", NODE_TYPE_GATEWAY: "GatewayNode", NODE_TYPE_SUBPROCESS: "SubProcessNode", NODE_TYPE_MULTIPLEINSTANCE: "MultipleInstanceNode", NODE_TYPE_COMPLEX_SIGNTOGETHER: "SignTogether", NODE_TYPE_COMPLEX_SIGHFORWARD: "SignForward", ELEMENT_TYPE_NODE: "NODE", ELEMENT_TYPE_CONNECTION: "CONNECTION" }, e.GraphData = function (e) { this.package = e.package, this.process = e.package.process, this.yongdaos = function (e) { var t = null, r = []; if (e && e.length > 0) { var i = kmain.mxGraphEditor.graph, n = i.getModel(); n.beginUpdate(); try { for (var a = 0; a < e.length; a++)t = mxtoolkit.insertSwimlane(i, e[a]), r.push(t) } finally { n.endUpdate() } } return r }(this.process.swimlanes), this.zuhes = function (e) { var t = null, r = []; if (e && e.length > 0) { var i = kmain.mxGraphEditor.graph, n = i.getModel(); n.beginUpdate(); try { for (var a = 0; a < e.length; a++)t = mxtoolkit.insertGroup(i, e[a]), r.push(t) } finally { n.endUpdate() } } return r }(this.process.groups), this.nodes = function (e) { var t = null, r = []; if (e && e.length > 0) { var i = kmain.mxGraphEditor.graph, n = i.getModel(); n.beginUpdate(); try { for (var a = 0; a < e.length; a++)t = mxtoolkit.insertVertex(i, e[a]), r.push(t) } finally { n.endUpdate() } } return r }(this.process.activities), this.lines = function (e) { var t = []; if (e && e.length > 0) { var r = kmain.mxGraphEditor.graph, i = r.getModel(); i.beginUpdate(); try { for (var n = 0; n < e.length; n++)mxtoolkit.insertEdge(r, e[n]), t.push(null) } finally { i.endUpdate() } } return t }(this.process.transitions) }, e }(), mxtoolkit = function () { function e() { } function t(e) { var t = mxUtils.createXmlDocument(), r = t.createElement("Activity"); r.setAttribute("label", e.name), r.setAttribute("code", e.code); var i = t.createElement("Description"); r.appendChild(i); var n = t.createTextNode(e.description); i.appendChild(n); var a = t.createElement("ActivityType"); if (a.setAttribute("type", e.type), a = mxfile.setActivityTypeElement(a, e), r.appendChild(a), e.performers && e.performers.length > 0) { var o = mxfile.setPerformersElement(t, e.performers); r.appendChild(o) } if (e.actions && e.actions.length > 0) { var s = mxfile.setActionsElement(t, e.actions); r.appendChild(s) } return r } return e.insertSwimlane = function (e, t) { var r = mxUtils.createXmlDocument().createElement("Swimlane"); r.setAttribute("label", t.name); e.getModel(); var i = e.getDefaultParent(), n = t.geography, a = n.widget; return e.insertVertex(i, t.id, r, a.left, a.top, a.width, a.height, n.style) }, e.insertGroup = function (e, t) { var r = mxUtils.createXmlDocument().createElement("Group"); r.setAttribute("label", t.name); e.getModel(); var i = e.getDefaultParent(), n = t.geography, a = n.widget; return e.insertVertex(i, t.id, r, a.left, a.top, a.width, a.height, n.style) }, e.insertVertex = function (e, r) { var i = {}, n = {}, a = null; return r.geography ? (n = (i = r.geography).widget, a = e.getModel().getCell(i.parent)) : (a = e.getDefaultParent(), n.left = 100, n.top = 100, n.width = 72, n.height = 32), null !== i && null !== i.style && "null" !== i.style && void 0 !== i.style && "undefined" !== i.style || (i.style = mxconfig.getVertexStyle(r)), e.insertVertex(a, r.id, t(r), n.left, n.top, n.width, n.height, i.style) }, e.insertEdge = function (e, t) { var r = mxUtils.createXmlDocument(), i = mxfile.setTransitionElement(r, t); if (!1 === $.isEmptyObject(t.condition)) { var n = mxfile.setConditionElement(r, t.condition); i.appendChild(n) } if (!1 === $.isEmptyObject(t.receiver)) { var a = mxfile.setReceiverElement(r, t.receiver); i.appendChild(a) } var o = t.geography, s = e.getModel(), l = null; return o && (l = s.getCell(o.parent)), l || (l = e.getDefaultParent()), e.insertEdge(l, t.id, i, e.getModel().getCell(t.from), e.getModel().getCell(t.to)) }, e }(), mxconfig = function () { function e() { } return e.style = {}, e.style.start = "symbol;image=scripts/mxGraph/src/editor/images/symbols/event.png", e.style.end = "symbol;image=scripts/mxGraph/src/editor/images/symbols/event_end.png", e.style["start-timer"] = "symbol;image=scripts/mxGraph/src/editor/images/symbols/start_event_timer.png", e.style["end-timer"] = "symbol;image=scripts/mxGraph/src/editor/images/symbols/end_event_timer.png", e.style["intermediate-timer"] = "symbol;image=scripts/mxGraph/src/editor/images/symbols/intermediate_event_timer.png", e.style.subprocess = "rectangle", e.style["gateway-split"] = "symbol;image=scripts/mxGraph/src/editor/images/symbols/fork.png", e.style["gateway-join"] = "symbol;image=scripts/mxGraph/src/editor/images/symbols/merge.png", e.style.subprocess = "symbol;image=scripts/mxGraph/src/editor/images/symbols/subprocess.png", e.style.multipleinstance = "symbol;image=scripts/mxGraph/src/editor/images/symbols/multiple_instance_task.png", e.getVertexStyle = function (t) { var r = null, i = t.type, n = t.trigger; if (i === kmodel.Config.NODE_TYPE_START) r = "Timer" === n ? e.style["start-timer"] : e.style.start; else if (i === kmodel.Config.NODE_TYPE_INTERMEDIATE) "Timer" === n && (r = e.style["intermediate-timer"]); else if (i === kmodel.Config.NODE_TYPE_END) r = "Timer" === n ? e.style["end-timer"] : e.style.end; else if (i === kmodel.Config.NODE_TYPE_TASK) r = e.style.task; else if (i === kmodel.Config.NODE_TYPE_MULTIPLEINSTANCE) r = e.style.multipleinstance; else if (i === kmodel.Config.NODE_TYPE_GATEWAY) r = e.style["gateway-split"]; else { if (i !== kmodel.Config.NODE_TYPE_SUBPROCESS) throw new Error("未知节点类型！"); r = e.style.subprocess } return r }, e }(), processlist = function () { function e() { } function t(t) { e.afterOpened && slick.trigger(e.afterOpened, { ProcessEntity: t }) } return e.pselectedProcessEntity = null, e.afterCreated = new slick.Event, e.afterOpened = new slick.Event, e.getProcessList = function () { $("#loading-indicator").show(), jshelper.ajaxPost("api/Wf2Xml/GetProcessListSimple", null, function (t) { if (1 === t.Status) { var r = document.querySelector("#myProcessGrid"); $(r).empty(); var i = { columnDefs: [{ headerName: "ID", field: "ID", width: 50 }, { headerName: "流程GUID", field: "ProcessGUID", width: 120 }, { headerName: "流程名称", field: "ProcessName", width: 200 }, { headerName: "版本", field: "Version", width: 40 }, { headerName: "状态", field: "IsUsing", width: 40 }, { headerName: "创建日期", field: "CreatedDateTime", width: 120 }], rowSelection: "single", onSelectionChanged: function () { i.api.getSelectedRows().forEach(function (t, r) { e.pselectedProcessEntity = t }) }, onRowDoubleClicked: function (t, r) { e.editProcess() } }; new agGrid.Grid(r, i), i.api.setRowData(t.Entity), $("#loading-indicator").hide() } else $.msgBox({ title: "Designer / Process", content: t.Message, type: "error" }) }) }, e.createProcess = function () { e.pselectedProcessEntity = null, BootstrapDialog.show({ title: "流程新建", message: $("<div></div>").load("process/edit"), draggable: !0 }) }, e.loadProcess = function () { var t = e.pselectedProcessEntity; null !== t ? ($("#txtProcessGUID").val(t.ProcessGUID), $("#txtProcessName").val(t.ProcessName), $("#txtVersion").val(t.Version), $("#ddlIsUsing").val(t.IsUsing), $("#txtDescription").val(t.Description)) : ($("#txtProcessGUID").val(""), $("#txtProcessName").val(""), $("#txtVersion").val("1"), $("#ddlIsUsing").val(), $("#txtDescription").val("")) }, e.editProcess = function () { if (null == e.pselectedProcessEntity) return $.msgBox({ title: "Designer / Process", content: "请先选择流程记录！", type: "alert" }), !1; BootstrapDialog.show({ title: "流程编辑", message: $("<div></div>").load("process/edit"), draggable: !0 }) }, e.saveProcess = function () { if ("" == $("#txtProcessName").val() || "" == $("#txtVersion").val()) return $.msgBox({ title: "Designer / Process", content: "请输入流程基本信息！", type: "alert" }), !1; var t = { ProcessGUID: $("#txtProcessGUID").val(), ProcessName: $("#txtProcessName").val(), Version: $("#txtVersion").val(), IsUsing: $("#ddlIsUsing").val(), Description: $("#txtDescription").val() }; null === e.pselectedProcessEntity ? processapi.create(t, function (t) { 1 == t.Status && (e.pselectedProcessEntity = t.Entity, e.afterCreated && slick.trigger(e.afterCreated, { ProcessEntity: t.Entity })) }) : processapi.update(t) }, e.deleteProcess = function () { $.msgBox({ title: "Are You Sure", content: "确实要删除流程定义记录吗? ", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (t) { if ("Yes" != t); else { var r = { ProcessGUID: e.pselectedProcessEntity.ProcessGUID, Version: e.pselectedProcessEntity.Version }; processapi.delete(r) } } }) }, e.sure = function () { null !== e.pselectedProcessEntity && t(e.pselectedProcessEntity) }, e.openProcessDiagram = function (t) { var r = { ID: t }; processapi.queryProcessFileByID(r, function (t) { 1 === t.Status ? e.afterOpened && slick.trigger(e.afterOpened, { ProcessEntity: t.Entity }) : $.msgBox({ title: "Designer / Process", content: "流程定义记录读取失败！错误：" + t.Message, type: "error" }) }) }, e.initXmlImport = function () { new qq.FineUploader({ element: document.getElementById("fine-uploader-validation"), template: "qq-template-validation", request: { endpoint: "api/FineUpload/import", params: { extraParam1: "1", extraParam2: "2" } }, thumbnails: { placeholders: { waitingPath: "Content/fineuploader/waiting-generic.png", notAvailablePath: "Content/fineuploader/not_available-generic.png" } }, validation: { allowedExtensions: ["xml", "txt"], itemLimit: 1, sizeLimit: 51200 }, callbacks: { onComplete: function (e, t, r) { 1 == r.success ? $.msgBox({ title: "Designer / Process", content: r.Message, type: "info", buttons: [{ value: "Ok" }] }) : $.msgBox({ title: "Designer / Process", content: r.ExceptionMessage, type: "error", buttons: [{ value: "Ok" }] }) } } }) }, e }(), processapi = function () { function e() { } return e.create = function (e, t) { jshelper.ajaxPost("api/Wf2Xml/CreateProcess", JSON.stringify(e), function (e) { 1 == e.Status ? $.msgBox({ title: "Designer / Process", content: "新创建流程记录成功保存！", type: "info" }) : $.msgBox({ title: "Designer / Process", content: e.Message, type: "error", buttons: [{ value: "Ok" }] }), t(e) }) }, e.update = function (e) { jshelper.ajaxPost("api/Wf2Xml/UpdateProcess", JSON.stringify(e), function (e) { 1 == e.Status ? $.msgBox({ title: "Designer / Process", content: "流程记录成功保存！", type: "info" }) : $.msgBox({ title: "Ooops", content: e.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }, e.delete = function (e) { jshelper.ajaxPost("api/Wf2Xml/DeleteProcess", JSON.stringify(e), function (e) { 1 == e.Status ? ($.msgBox({ title: "Designer / Process", content: "流程记录已经删除！", type: "info" }), processlist.getProcessList()) : $.msgBox({ title: "Ooops", content: e.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }, e.queryProcessFile = function (e, t) { jshelper.ajaxPost("api/Wf2Xml/QueryProcessFile", JSON.stringify(e), function (e) { t(e) }) }, e.queryProcessFileByID = function (e, t) { jshelper.ajaxPost("api/Wf2Xml/QueryProcessFileByID", JSON.stringify(e), function (e) { t(e) }) }, e.saveProcessFile = function (e) { jshelper.ajaxPost("api/Wf2Xml/SaveProcessFile", JSON.stringify(e), function (e) { "1" == e.Status ? $.msgBox({ title: "Designer / Index", content: "流程XML内容保存成功！", type: "info" }) : $.msgBox({ title: "Designer / Index", content: "流程XML内容保存失败！错误信息：" + e.Message, type: "info" }) }) }, e.getSchedule = function () { }, e }(), activityproperty = function () { function e() { } function t(t) { var i = document.querySelector("#myPerformerGrid"); $(i).empty(); var n = { columnDefs: [{ headerName: "ID", field: "id", width: 160 }, { headerName: "角色名称", field: "name", width: 160 }, { headerName: "角色代码", field: "code", width: 160 }], rowSelection: "single", onSelectionChanged: function () { n.api.getSelectedRows().forEach(function (t, r) { e.mselectedActivityPerformerGUID = t.id }) } }; new agGrid.Grid(i, n); var a = r(t); n.api.setRowData(a) } function r(e) { var t = null, r = []; if (e.performers && e.performers.length > 0) for (var n = 0; n < e.performers.length; n++)(t = i(e.performers[n].id)) && r.push(t); return r } function i(e) { var t = null, r = kmain.mxSelectedParticipants; if (r && r.length > 0) for (var i = 0; i < r.length; i++) { var n = r[i]; if (e === n.id) { t = { id: n.id, name: n.name, code: n.code, outerId: n.outerId }; break } } return t } function n(e) { var t = e.actions; if (t && t.length > 0) { var r = t[0]; $("#txtActionName").val(r.name), $("#txtActionAssembly").val(r.assembly), $("#txtActionInterface").val(r.interface), $("#txtActionMethod").val(r.method) } } return e.mselectedActivityPerformerGUID = "", e.loadActivity = function () { $("#ddlComplexType").prop("selectedIndex", -1), $("#ddlMergeType").prop("selectedIndex", -1), $("#ddlCompareType").prop("selectedIndex", -1); var e = kmain.mxSelectedDomElement.Element; e && ($("#txtActivityName").val(e.name), $("#txtActivityCode").val(e.code), $("#txtDescription").val(e.description), t(e), n(e), e.type === kmodel.Config.NODE_TYPE_MULTIPLEINSTANCE ? ($("#divMultipleInstanceContent").show(), $("#ddlComplexType").val(e.complexType), $("#ddlMergeType").val(e.mergeType), $("#ddlCompareType").val(e.compareType), $("#txtCompleteOrder").val(e.completeOrder)) : $("#divMultipleInstanceContent").hide()) }, e.saveActivity = function () { var e = $("#txtActivityName").val(), t = $("#txtActivityCode").val(), r = $("#txtDescription").val(), i = kmain.mxSelectedDomElement.Element; if (i) { i.name = e, i.code = t, i.description = r, i.actions = []; var n = {}; n.type = "ExternalMethod", n.name = $("#txtActionName").val(), n.assembly = $("#txtActionAssembly").val(), n.interface = $("#txtActionInterface").val(), n.method = $("#txtActionMethod").val(), i.actions.push(n), i.type === kmodel.Config.NODE_TYPE_MULTIPLEINSTANCE && (i.complexType = $("#ddlComplexType").val(), i.mergeType = $("#ddlMergeType").val(), i.compareType = $("#ddlCompareType").val(), i.completeOrder = $("#txtCompleteOrder").val()), kmain.setVertexValue(i) } }, e.addPerformer = function () { BootstrapDialog.show({ title: "角色列表", message: $("<div></div>").load("role/list"), draggable: !0 }) }, e.syncActivityPerformers = function (e, r) { var i = kmain.mxSelectedDomElement.Element, n = i.performers; n || (n = i.performers = []); var a = null; if (null != kmain.mxSelectedParticipants) for (var o = kmain.mxSelectedParticipants, s = 0; s < o.length; s++)if ("role" === e && "Role" === o[s].type && r.ID === o[s].outerId) { a = o[s]; break } if (a) { for (var l = !1, s = 0; s < n.length; s++)if (a.id === n[s].id) { l = !0; break } if (l) $.msgBox({ title: "Desinger / ActivityProperty", content: "要添加的角色或用户数据已经存在！", type: "info" }); else { d = { id: a.id, name: a.name, code: a.code, outerId: a.outerId }; i.performers.push(d), t(i), kmain.setVertexPerformers(i.performers) } } else if ("role" === e) { var c = { id: jshelper.getUUID(), type: "Role", name: r.RoleName, code: r.RoleCode, outerId: r.ID }; kmain.mxSelectedParticipants.push(c); var d = { id: c.id, name: c.name, code: c.code, outerId: c.outerId }; i.performers.push(d), t(i), kmain.setVertexPerformers(i.performers) } }, e.delPerformer = function () { var r = e.mselectedActivityPerformerGUID, i = kmain.mxSelectedDomElement.Element, n = i.performers; i.performers = jQuery.grep(n, function (e) { return e.id !== r }), t(i), kmain.setVertexPerformers(i.performers) }, e }(), transitionproperty = function () { function e() { } return e.load = function () { var e = kmain.mxSelectedDomElement.Element; e && ($("#txtDescription").val(e.description), e.receiver && e.receiver.type && $("#ddlReceiverType").val(e.receiver.type), e.condition && $("#txtCondition").val($.trim(e.condition.text))) }, e.save = function () { var e = $("#txtDescription").val(), t = {}, r = $("#ddlReceiverType").val(); "default" !== r && (t.type = r); var i = {}; i.type = "Expression", i.text = $.trim($("#txtCondition").val()); var n = kmain.mxSelectedDomElement.Element; null !== n && (n.description = e, n.receiver = t, n.condition = i, kmain.setEdgeValue(n)) }, e }(), gatewayproperty = function () { function e() { } return e.splitOptions = [{ value: "AndSplit", text: "与分支" }, { value: "OrSplit", text: "或分支" }, { value: "AndSplitMI", text: "与分支(多实例)" }, { value: "OrSplitMI", text: "或分支(多实例)" }], e.joinOptions = [{ value: "AndJoin", text: "与合并" }, { value: "OrJoin", text: "或合并" }, { value: "AndJoinMI", text: "与合并(多实例)" }, { value: "OrJoinMI", text: "或合并(多实例)" }], e.loadGatewayInformation = function () { var t = kmain.mxSelectedDomElement.Element; if (t && ($("#txtDescription").val(t.description), t.gatewaySplitJoinType)) { var r = t.gatewaySplitJoinType; $("#ddlGatewayType").val(r), $("#ddlGatewayType").attr("disabled", !0), e.appendDirectionType(r), t.gatewayDirection && $("#ddlDirectionType").val(t.gatewayDirection) } $("#ddlGatewayType").change(function () { var t = $("#ddlGatewayType").val(); e.appendDirectionType(t) }) }, e.appendDirectionType = function (t) { $("#ddlDirectionType").empty().append('<option value="default" selected>--请选择--</option>'); var r = null; if ("Split" == t) for (i = 0; i < e.splitOptions.length; i++)r = e.splitOptions[i], $("#ddlDirectionType").append($("<option></option>").attr("value", r.value).text(r.text)); else if ("Join" == t) for (var i = 0; i < e.joinOptions.length; i++)r = e.joinOptions[i], $("#ddlDirectionType").append($("<option></option>").attr("value", r.value).text(r.text)) }, e.saveGatewayInformation = function () { var e = $("#txtDescription").val(), t = $("#ddlGatewayType").val(), r = $("#ddlDirectionType").val(); if ("default" != t) if ("default" != r) { var i = kmain.mxSelectedDomElement.Element; i && (i.description = e, i.gatewaySplitJoinType = t, i.gatewayDirection = r, kmain.setVertexValue(i)) } else $.msgBox({ title: "Designer / GatewayProperty", content: "请重新选择分支合并的子类型！", type: "info" }); else $.msgBox({ title: "Designer / GatewayProperty", content: "请重新选择分支合并类型！", type: "info" }) }, e }(), subprocessmanager; subprocessmanager || (subprocessmanager = {}), function () { function e() { $.msgBox({ title: "Are You Sure", content: "请确认要将当前选中记录设置为子流程吗？！", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (e) { if ("Yes" != e); else { $("#txtProcessGUID").val(t), $("#txtProcessName").val(r); var i = kmain.mxSelectedDomElement.Element; i && (i.subId = t, kmain.setVertexValue(i)) } } }) } var t = null, r = null; subprocessmanager.load = function () { var e = kmain.mxSelectedDomElement.Element; null !== e && "" !== e.subId && ($("#txtProcessGUID").val(e.subId), subprocessmanager.getProcess(e.subId)), subprocessmanager.getProcessList() }, subprocessmanager.getProcessList = function () { $("#spinner").show(), jshelper.ajaxPost("api/Wf2Xml/GetProcessListSimple", null, function (e) { if (1 === e.Status) { var i = document.querySelector("#mySubProcessGrid"), n = { columnDefs: [{ headerName: "ID", field: "ID", width: 50 }, { headerName: "流程GUID", field: "ProcessGUID", width: 120 }, { headerName: "流程名称", field: "ProcessName", width: 160 }, { headerName: "版本", field: "Version", width: 40 }, { headerName: "状态", field: "IsUsing", width: 60 }, { headerName: "创建日期", field: "CreatedDateTime", width: 120 }], rowSelection: "single", onSelectionChanged: function () { var e = 0; n.api.getSelectedRows().forEach(function (i, n) { e = i.ID, t = i.ProcessGUID, r = i.ProcessName }) }, onRowDoubleClicked: function (e, t) { } }; new agGrid.Grid(i, n), n.api.setRowData(e.Entity), $("#loading-indicator").hide() } else $.msgBox({ title: "Designer / SubProcess", content: e.Message, type: "error" }) }) }, subprocessmanager.getProcess = function (e) { if (null !== e && void 0 !== e) { var t = { ProcessGUID: e }; jshelper.ajaxPost("api/Wf2Xml/GetProcess", JSON.stringify(t), function (e) { if (1 == e.Status) { var t = e.Entity; $("#txtProcessName").val(t.ProcessName) } }) } }, subprocessmanager.saveSubProcess = function () { e() } }(); var eventproperty = function () { function e() { } return e.loadEvent = function () { var e = kmain.mxSelectedDomElement.Element; e && ($("#txtActivityName").val(e.name), $("#txtActivityCode").val(e.code), $("#txtDescription").val(e.description), $("#txtCronExpression").val(e.expression)) }, e.editCron = function () { var e = $("#txtCronExpression").val(); BootstrapDialog.show({ title: "CRON表达式编辑", message: $("<div></div>").load("cron/edit"), data: { expression: e }, draggable: !0, onshown: function (e) { var t = this.data.expression; setTimeout(function () { t && "null" !== t && ($("#cronExpressionValue").html(t), $.syncCronExpression(t), $.updateCronExpression(), $.updateCronGui()) }, 200) } }) }, e.saveEvent = function () { var e = $("#txtActivityName").val(), t = $("#txtActivityCode").val(), r = $("#txtDescription").val(), i = kmain.mxSelectedDomElement.Element; i && (i.name = e, i.code = t, i.description = r, i.expression = $("#txtCronExpression").val(), kmain.setVertexValue(i)) }, e.loadEndEvent = function () { var e = kmain.mxSelectedDomElement.Element; e && ($("#txtActivityName").val(e.name), $("#txtActivityCode").val(e.code), $("#txtDescription").val(e.description), $("#txtDeadline").val(e.expression)) }, e.saveEndEvent = function () { var e = $("#txtActivityName").val(), t = $("#txtActivityCode").val(), r = $("#txtDescription").val(), i = kmain.mxSelectedDomElement.Element; i && (i.name = e, i.code = t, i.description = r, i.expression = $("#txtDeadline").val(), kmain.setVertexValue(i)) }, e }(), cronmanager = function () { function e() { } return e.saveCron = function () { var e = $("#cronExpressionValue").text(); $("#txtCronExpression").val(e) }, e }(), rolelist = function () { function e() { } var t = "", r = null; return e.getRoleList = function () { jshelper.ajaxPost("api/Wf2Xml/GetRoleAll", null, function (e) { if (1 == e.Status) { var i = document.querySelector("#myRoleGrid"), n = { columnDefs: [{ headerName: "ID", field: "ID", width: 60 }, { headerName: "角色名称", field: "RoleName", width: 200 }, { headerName: "角色代码", field: "RoleCode", width: 200 }], rowSelection: "single", onSelectionChanged: function () { n.api.getSelectedRows().forEach(function (e, i) { t = "role", r = e }) } }; new agGrid.Grid(i, n), n.api.setRowData(e.Entity) } }) }, e.sure = function () { "" != t && null != r ? activityproperty.syncActivityPerformers(t, r) : $.msgBox({ title: "Designer / Role", content: "请选择角色记录！", type: "alert" }) }, e }();